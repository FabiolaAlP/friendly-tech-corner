---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Search the Blog" showSearchBar={false}>
  <section
    class="flex justify-center items-center flex-col p-4 mt-20 rounded-lg"
  >
    <div
      class="w-full sm:max-w-xl p-4 border-2 border-light-primary rounded-lg form"
    >
      <div>
        <label class="font-bold block text-center py-2" for="search"
          >Search the blog</label
        >
      </div>
      <div class="relative">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400"
        >
          <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
          <path d="M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0"></path>
          <path d="M21 21l-6 -6"></path>
        </svg>
        <input
          class="border-0 focus:outline-none focus:ring-2 ring-light-primary text-dark-bg rounded-lg w-full p-2 pl-10 font-ibm"
          type="search"
          name="search"
          id="search"
          required
          minlength="2"
          maxlength="24"
          placeholder="enter a search term"
        />
      </div>
    </div>

    <section class="w-full sm:max-w-xl p-4" aria-label="Search Results">
      <p class="font-ibm text-xl font-bold text-pretty" id="searchReadout"></p>
      <ul id="searchResults"></ul>
    </section>
  </section>
</Layout>
<script>
  //imports
  import DOMPurify from "dompurify";
  import Fuse from "fuse.js";
  import { format } from "date-fns";

  let SEARCH_DATA;
  let FUSE_INSTANCE;
  const FUSE_OPTIONS = {
    includeScore: true,
    shouldSort: true,
    threshold: 0.5,
    keys: [
      {
        name: "title",
        weight: 1,
      },
      {
        name: "excerpt",
        weight: 0.75,
      },
      {
        name: "tags",
        weight: 0.7,
      },
    ],
  };
  // const SPINNER = `<svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-loader animate-spin"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 6l0 -3" /><path d="M16.25 7.75l2.15 -2.15" /><path d="M18 12l3 0" /><path d="M16.25 16.25l2.15 2.15" /><path d="M12 18l0 3" /><path d="M7.75 16.25l-2.15 2.15" /><path d="M6 12l-3 0" /><path d="M7.75 7.75l-2.15 -2.15" /></svg>`;

  //selectors
  const search = document.querySelector("#search") as HTMLInputElement;
  const searchReadout = document.querySelector("#searchReadout");
  const resultsList = document.querySelector("#searchResults");
  //functions
  function updateDocumentTitle(search) {
    document.title = search
      ? `Search results for "${search}"`
      : "Search the Blog";
  }
  function updateSearchReadout(search) {
    searchReadout.textContent = search ? `Search results for "${search}"` : "";
  }
  function updateSearchPageURL(search) {
    //current location
    const url = new URL(window.location.href);
    url.searchParams.set("query", search);
    window.history.replaceState(null, "", url);
  }
  function generateSearchList(results) {
    return results
      .map((result) => {
        const { slug, title, author, date, excerpt, tags } = result.item;
        const dateAsDate = new Date(date);
        return `<li class="">
								<a class="font-ibm hover:underline text-light-text dark:text-dark-text text-lg" href="/posts/${slug}/">${title}</a>
							</li>`;
      })
      .join("");
  }
  async function fetchSearchResults(search) {
    if (search.length === 0) return;
    // resultsList.innerHTML = SPINNER;
    if (!SEARCH_DATA) {
      try {
        const res = await fetch("/search.json");
        if (!res.ok) {
          throw new Error("Something went wrong, please try again later");
        }
        const data = await res.json();
        SEARCH_DATA = data;
      } catch (error) {
        console.error(error);
      }
    }
    //need to create fuse instance to run it against data
    if (SEARCH_DATA && !FUSE_INSTANCE) {
      FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
    }
    if (!FUSE_INSTANCE) return;
    const searchResult = FUSE_INSTANCE.search(search);
    resultsList.innerHTML =
      searchResult.length > 0
        ? generateSearchList(searchResult)
        : "No results found...";
  }
  //events
  window.addEventListener("DOMContentLoaded", () => {
    const urlParams = DOMPurify.sanitize(
      new URLSearchParams(window.location.search).get("query")
    );
    fetchSearchResults(urlParams);
    updateDocumentTitle(urlParams);
    updateSearchReadout(urlParams);
    search.value = urlParams;
    search.focus();
  });
  //input changes
  search.addEventListener("input", () => {
    const searchTerm = DOMPurify.sanitize(search.value);
    updateDocumentTitle(searchTerm);
    updateSearchReadout(searchTerm);
    fetchSearchResults(searchTerm);
    updateSearchPageURL(searchTerm);
  });
</script>
